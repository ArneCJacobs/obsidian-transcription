/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Transcription
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/transcribe.ts
var import_obsidian2 = require("obsidian");

// src/utils.ts
var import_obsidian = require("obsidian");
var randomString = (length) => Array(length + 1).join((Math.random().toString(36) + "00000000000000000").slice(2, 18)).slice(0, length);
async function payloadGenerator(payload_data) {
  const boundary_string = `Boundary${randomString(16)}`;
  const boundary = `------${boundary_string}`;
  const chunks = [];
  for (const [key, value] of Object.entries(payload_data)) {
    chunks.push(new TextEncoder().encode(`${boundary}\r
`));
    if (typeof value === "string") {
      chunks.push(new TextEncoder().encode(`Content-Disposition: form-data; name="${key}"\r
\r
`));
      chunks.push(new TextEncoder().encode(`${value}\r
`));
    } else if (value instanceof Blob) {
      chunks.push(new TextEncoder().encode(`Content-Disposition: form-data; name="${key}"; filename="blob"\r
Content-Type: "application/octet-stream"\r
\r
`));
      chunks.push(await (0, import_obsidian.getBlobArrayBuffer)(value));
      chunks.push(new TextEncoder().encode("\r\n"));
    } else {
      chunks.push(new Uint8Array(await new Response(value).arrayBuffer()));
      chunks.push(new TextEncoder().encode("\r\n"));
    }
  }
  await Promise.all(chunks);
  chunks.push(new TextEncoder().encode(`${boundary}--\r
`));
  return [await new Blob(chunks).arrayBuffer(), boundary_string];
}

// src/transcribe.ts
var TranscriptionEngine = class {
  constructor(settings, vault) {
    this.transcription_engines = {
      "scribe": this.getTranscriptionScribe,
      "whisper_asr": this.getTranscriptionWhisperASR
    };
    this.settings = settings;
    this.vault = vault;
  }
  segmentsToTimestampedString(segments) {
    var transcription = "";
    const duration_seconds = Math.floor(segments[segments.length - 1].end);
    var start_iso_slice = 14;
    if (duration_seconds >= 3600)
      start_iso_slice = 11;
    for (var s of segments) {
      if (typeof s.start === "number" && typeof s.text === "string") {
        const start = new Date(Math.floor(s.start) * 1e3).toISOString().substring(start_iso_slice, 19);
        const end = new Date(Math.floor(s.end) * 1e3).toISOString().substring(start_iso_slice, 19);
        const timestamp = `\`[${start} - ${end}]\``;
        transcription += timestamp + ": " + s.text + "\n";
      } else {
        if (this.settings.debug)
          console.error(`Invalid segment: ${s}`);
      }
    }
    return transcription;
  }
  async getTranscription(file) {
    if (this.settings.debug)
      console.log(`Transcription engine: ${this.settings.transcription_engine}`);
    this.transcription_engine = this.transcription_engines[this.settings.transcription_engine];
    return this.transcription_engine(file);
  }
  async getTranscriptionWhisperASR(file) {
    let payload_data = {};
    payload_data["audio_file"] = new Blob([await this.vault.readBinary(file)]);
    ;
    const [request_body, boundary_string] = await payloadGenerator(payload_data);
    const options = {
      method: "POST",
      url: `${this.settings.whisperASRUrl}/asr?task=transcribe&language=en`,
      contentType: `multipart/form-data; boundary=----${boundary_string}`,
      body: request_body
    };
    return (0, import_obsidian2.requestUrl)(options).then(async (response) => {
      if (this.settings.debug)
        console.log(response);
      if (this.settings.timestamps)
        return this.segmentsToTimestampedString(response.json.segments);
      else {
        const transcription = response.json.text;
        return transcription;
      }
    }).catch((error) => {
      if (this.settings.debug)
        console.error(error);
      return Promise.reject(error);
    });
  }
  async getTranscriptionScribe(file) {
    let api_base;
    if (this.settings.debug)
      api_base = "https://dev.api.gambitengine.com";
    else
      api_base = "https://api.gambitengine.com";
    const create_transcription_request = {
      method: "POST",
      url: `${api_base}/v1/scribe/transcriptions`,
      headers: { "Authorization": `Bearer ${this.settings.scribeToken}` },
      body: JSON.stringify({ "translate": this.settings.translate })
    };
    if (this.settings.debug)
      console.log("Transcribing with Scribe");
    return (0, import_obsidian2.requestUrl)(create_transcription_request).then(async (response) => {
      const create_transcription_response = response.json;
      if (this.settings.debug)
        console.log(create_transcription_response);
      if (this.settings.debug)
        console.log("Uploading file to Scribe S3...");
      if (create_transcription_response.upload_request === void 0 || create_transcription_response.upload_request.url === void 0 || create_transcription_response.upload_request.fields === void 0) {
        if (this.settings.debug)
          console.error("Scribe returned an invalid upload request");
        return Promise.reject("Scribe returned an invalid upload request");
      }
      let payload_data = {};
      for (const [key, value] of Object.entries(create_transcription_response.upload_request.fields)) {
        if (typeof key === "string" && typeof value === "string")
          payload_data[key] = value;
        else {
          if (this.settings.debug)
            console.error("Scribe returned an invalid upload request");
          return Promise.reject("Scribe returned an invalid upload request");
        }
      }
      payload_data["file"] = new Blob([await this.vault.readBinary(file)]);
      ;
      const [request_body, boundary_string] = await payloadGenerator(payload_data);
      const upload_file_request = {
        method: "POST",
        url: create_transcription_response.upload_request.url,
        contentType: `multipart/form-data; boundary=----${boundary_string}`,
        body: request_body
      };
      return (0, import_obsidian2.requestUrl)(upload_file_request).then(async (response2) => {
        if (this.settings.debug)
          console.log("File uploaded to Scribe S3");
        const get_transcription_request = {
          method: "GET",
          url: `${api_base}/v1/scribe/transcriptions/${create_transcription_response.transcription.transcription_id}`,
          headers: { "Authorization": `Bearer ${this.settings.scribeToken}` }
        };
        if (this.settings.debug)
          console.log("Waiting for Scribe to finish transcribing...");
        let tries = 0;
        while (true) {
          const get_transcription_response = await (0, import_obsidian2.requestUrl)(get_transcription_request).json;
          if (this.settings.debug)
            console.log(get_transcription_response);
          if (get_transcription_response.status == "complete" && get_transcription_response.transcription_text !== void 0 && get_transcription_response.transcription_result !== void 0) {
            if (this.settings.debug)
              console.log("Scribe finished transcribing");
            if (this.settings.timestamps)
              return this.segmentsToTimestampedString(get_transcription_response.transcription_result);
            else
              return get_transcription_response.transcription_text;
          } else if (tries > 60) {
            if (this.settings.debug)
              console.error("Scribe took too long to transcribe the file");
            return Promise.reject("Scribe took too long to transcribe the file");
          } else if (get_transcription_response.status == "failed") {
            if (this.settings.debug)
              console.error("Scribe failed to transcribe the file");
            return Promise.reject("Scribe failed to transcribe the file");
          } else if (get_transcription_response.status == "validation_failed") {
            if (this.settings.debug)
              console.error("Scribe has detected an invalid file");
            return Promise.reject("Scribe has detected an invalid file");
          } else {
            tries += 1;
            await sleep(3e3);
          }
        }
      }).catch((error) => {
        if (this.settings.debug)
          console.error(error);
        return Promise.reject(error);
      });
    }).catch((error) => {
      if (this.settings.debug)
        console.error(error);
      return Promise.reject(error);
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  timestamps: false,
  translate: false,
  transcribeFileExtensions: ["mp3", "wav", "webm", "ogg", "flac", "m4a", "aac", "amr", "opus", "aiff", "m3gp", "mp4", "m4v", "mov", "avi", "wmv", "flv", "mpeg", "mpg", "mkv"],
  whisperASRUrl: "http://localhost:9000",
  debug: false,
  scribeToken: "",
  transcription_engine: "Scribe"
};
var _Transcription = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    _Transcription.plugin = this;
    console.log("Loading Obsidian Transcription");
    this.transcription_engine = new TranscriptionEngine(this.settings, this.app.vault);
    this.addCommand({
      id: "obsidian-transcription-transcribe-all-in-view",
      name: "Transcribe all audio files in view",
      editorCallback: async (editor, view) => {
        const markdownFilePath = view.file.path;
        if (this.settings.debug)
          console.log("Transcribing all audio files in " + markdownFilePath);
        new import_obsidian3.Notice("Transcribing all audio files in " + view.file.name, 3e3);
        const filesLinked = Object.keys(this.app.metadataCache.resolvedLinks[markdownFilePath]);
        console.log(this.app.metadataCache);
        const filesToTranscribe = [];
        for (const linkedFilePath of filesLinked) {
          const linkedFileExtension = linkedFilePath.split(".").pop();
          if (linkedFileExtension === void 0 || !this.settings.transcribeFileExtensions.includes(linkedFileExtension.toLowerCase())) {
            if (this.settings.debug)
              console.log("Skipping " + linkedFilePath + " because the file extension is not in the list of transcribeable file extensions");
            continue;
          }
          const linkedFile = this.app.vault.getAbstractFileByPath(linkedFilePath);
          if (linkedFile instanceof import_obsidian3.TFile)
            filesToTranscribe.push(linkedFile);
          else {
            if (this.settings.debug)
              console.log("Could not find file " + linkedFilePath);
            continue;
          }
        }
        for (const fileToTranscribe of filesToTranscribe) {
          if (this.settings.debug)
            console.log("Transcribing " + fileToTranscribe.path);
          this.transcription_engine.getTranscription(fileToTranscribe).then(async (transcription) => {
            if (this.settings.debug)
              console.log(transcription);
            var fileText = await this.app.vault.read(view.file);
            const fileLinkString = this.app.metadataCache.fileToLinktext(fileToTranscribe, view.file.path);
            const fileLinkStringTagged = `[[${fileLinkString}]]`;
            console.log(fileLinkString);
            const startReplacementIndex = fileText.indexOf(fileLinkStringTagged) + fileLinkStringTagged.length;
            fileText = [fileText.slice(0, startReplacementIndex), `
${transcription}`, fileText.slice(startReplacementIndex)].join("");
            await this.app.vault.modify(view.file, fileText);
          }).catch((error) => {
            if (this.settings.debug)
              new import_obsidian3.Notice("Error transcribing file " + fileToTranscribe.name + ": " + error);
            else
              new import_obsidian3.Notice("Error transcribing file, enable debug mode to see more");
          });
        }
      }
    });
    this.app.workspace.on("quit", () => {
      _Transcription.children.forEach((child) => {
        child.kill();
      });
    });
    this.addSettingTab(new TranscriptionSettingTab(this.app, this));
  }
  onunload() {
    if (this.settings.debug)
      console.log("Unloading Obsidian Transcription");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var Transcription = _Transcription;
Transcription.children = [];
var TranscriptionSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Obsidian Transcription" });
    new import_obsidian3.Setting(containerEl).setName("General Settings").setHeading();
    new import_obsidian3.Setting(containerEl).setName("Transcription engine").setDesc("The transcription engine to use").setTooltip("Scribe is a cloud based transcription engine offered by GambitEngine (no set up, mobile friendly). Whisper ASR is a self-hosted local transcription engine that uses the Whisper ASR python app. (requires separate set up, not mobile friendly)").setClass("transcription-engine-setting").addDropdown((dropdown) => dropdown.addOption("scribe", "Scribe").addOption("whisper_asr", "Whisper ASR").setValue(this.plugin.settings.transcription_engine).onChange(async (value) => {
      this.plugin.settings.transcription_engine = value;
      await this.plugin.saveSettings();
      if (value == "scribe") {
        containerEl.findAll(".scribe-settings").forEach((element) => {
          element.style.display = "block";
        });
        containerEl.findAll(".whisper-asr-settings").forEach((element) => {
          element.style.display = "none";
        });
      } else if (value == "whisper_asr") {
        containerEl.findAll(".scribe-settings").forEach((element) => {
          element.style.display = "none";
        });
        containerEl.findAll(".whisper-asr-settings").forEach((element) => {
          element.style.display = "block";
        });
      }
    }));
    new import_obsidian3.Setting(containerEl).setName("Enable timestamps").setDesc("Add timestamps to the beginning of each line").addToggle((toggle) => toggle.setValue(this.plugin.settings.timestamps).onChange(async (value) => {
      this.plugin.settings.timestamps = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Scribe Settings").setClass("scribe-settings").setHeading();
    new import_obsidian3.Setting(containerEl).setName("Enable translation").setDesc("Translate the transcription from any language to English").setClass("scribe-settings").addToggle((toggle) => toggle.setValue(this.plugin.settings.translate).onChange(async (value) => {
      this.plugin.settings.translate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Scribe Token").setDesc("The token used to authenticate with the Scribe API. Get one at https://scribe.gambitengine.com").setClass("scribe-settings").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.scribeToken).setValue(this.plugin.settings.scribeToken).onChange(async (value) => {
      this.plugin.settings.scribeToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Whisper ASR Settings").setClass("whisper-asr-settings").setHeading();
    new import_obsidian3.Setting(containerEl).setName("Whisper ASR URL").setDesc("The URL of the Whisper ASR server: https://github.com/ahmetoner/whisper-asr-webservice").setClass("whisper-asr-settings").addText((text) => text.setPlaceholder(DEFAULT_SETTINGS.whisperASRUrl).setValue(this.plugin.settings.whisperASRUrl).onChange(async (value) => {
      this.plugin.settings.whisperASRUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Advanced Settings").setHeading();
    new import_obsidian3.Setting(containerEl).setName("Debug mode").setDesc("Enable debug mode to see more console logs").addToggle((toggle) => toggle.setValue(this.plugin.settings.debug).onChange(async (value) => {
      this.plugin.settings.debug = value;
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.transcription_engine == "scribe") {
      containerEl.findAll(".scribe-settings").forEach((element) => {
        element.style.display = "block";
      });
      containerEl.findAll(".whisper-asr-settings").forEach((element) => {
        element.style.display = "none";
      });
    } else if (this.plugin.settings.transcription_engine == "whisper_asr") {
      containerEl.findAll(".scribe-settings").forEach((element) => {
        element.style.display = "none";
      });
      containerEl.findAll(".whisper-asr-settings").forEach((element) => {
        element.style.display = "block";
      });
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
